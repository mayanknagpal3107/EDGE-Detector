
egdedetect.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000550  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000001a  00800060  00000550  000005e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000125  0080007a  0080007a  000005fe  2**0
                  ALLOC
  3 .debug_aranges 00000020  00000000  00000000  000005fe  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 000000b0  00000000  00000000  0000061e  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000054a  00000000  00000000  000006ce  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000264  00000000  00000000  00000c18  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000005ba  00000000  00000000  00000e7c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000c0  00000000  00000000  00001438  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000001f4  00000000  00000000  000014f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000140  00000000  00000000  000016ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000030  00000000  00000000  0000182c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__vector_11>
  30:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__vector_12>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e0 e5       	ldi	r30, 0x50	; 80
  68:	f5 e0       	ldi	r31, 0x05	; 5
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	aa 37       	cpi	r26, 0x7A	; 122
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
  76:	11 e0       	ldi	r17, 0x01	; 1
  78:	aa e7       	ldi	r26, 0x7A	; 122
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	af 39       	cpi	r26, 0x9F	; 159
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 f7 00 	call	0x1ee	; 0x1ee <main>
  8a:	0c 94 a6 02 	jmp	0x54c	; 0x54c <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__vector_11>:
SIGNAL(UART0_RECEIVE_INTERRUPT)
/*************************************************************************
Function: UART Receive Complete interrupt
Purpose:  called when the UART has received a character
**************************************************************************/
{
  92:	1f 92       	push	r1
  94:	0f 92       	push	r0
  96:	0f b6       	in	r0, 0x3f	; 63
  98:	0f 92       	push	r0
  9a:	11 24       	eor	r1, r1
  9c:	2f 93       	push	r18
  9e:	8f 93       	push	r24
  a0:	9f 93       	push	r25
  a2:	ef 93       	push	r30
  a4:	ff 93       	push	r31
    unsigned char usr;
    unsigned char lastRxError;
 
 
    /* read UART status register and UART data register */ 
    usr  = UART0_STATUS;
  a6:	9b b1       	in	r25, 0x0b	; 11
    data = UART0_DATA;
  a8:	2c b1       	in	r18, 0x0c	; 12
#elif defined ( ATMEGA_UART )
    lastRxError = (usr & (_BV(FE)|_BV(DOR)) );
#endif
        
    /* calculate buffer index */ 
    tmphead = ( UART_RxHead + 1) & UART_RX_BUFFER_MASK;
  aa:	e0 91 9c 01 	lds	r30, 0x019C
  ae:	ef 5f       	subi	r30, 0xFF	; 255
    
    if ( tmphead == UART_RxTail ) {
  b0:	80 91 9d 01 	lds	r24, 0x019D
  b4:	e8 17       	cp	r30, r24
  b6:	11 f4       	brne	.+4      	; 0xbc <__vector_11+0x2a>
  b8:	82 e0       	ldi	r24, 0x02	; 2
  ba:	08 c0       	rjmp	.+16     	; 0xcc <__vector_11+0x3a>
    
    /* */
#if defined( AT90_UART )
    lastRxError = (usr & (_BV(FE)|_BV(DOR)) );
#elif defined( ATMEGA_USART )
    lastRxError = (usr & (_BV(FE)|_BV(DOR)) );
  bc:	89 2f       	mov	r24, r25
  be:	88 71       	andi	r24, 0x18	; 24
    if ( tmphead == UART_RxTail ) {
        /* error: receive buffer overflow */
        lastRxError = UART_BUFFER_OVERFLOW >> 8;
    }else{
        /* store new index */
        UART_RxHead = tmphead;
  c0:	e0 93 9c 01 	sts	0x019C, r30
        /* store received data in buffer */
        UART_RxBuf[tmphead] = data;
  c4:	f0 e0       	ldi	r31, 0x00	; 0
  c6:	e6 56       	subi	r30, 0x66	; 102
  c8:	ff 4f       	sbci	r31, 0xFF	; 255
  ca:	20 83       	st	Z, r18
    }
    UART_LastRxError = lastRxError;   
  cc:	80 93 9e 01 	sts	0x019E, r24
}
  d0:	ff 91       	pop	r31
  d2:	ef 91       	pop	r30
  d4:	9f 91       	pop	r25
  d6:	8f 91       	pop	r24
  d8:	2f 91       	pop	r18
  da:	0f 90       	pop	r0
  dc:	0f be       	out	0x3f, r0	; 63
  de:	0f 90       	pop	r0
  e0:	1f 90       	pop	r1
  e2:	18 95       	reti

000000e4 <__vector_12>:
SIGNAL(UART0_TRANSMIT_INTERRUPT)
/*************************************************************************
Function: UART Data Register Empty interrupt
Purpose:  called when the UART is ready to transmit the next byte
**************************************************************************/
{
  e4:	1f 92       	push	r1
  e6:	0f 92       	push	r0
  e8:	0f b6       	in	r0, 0x3f	; 63
  ea:	0f 92       	push	r0
  ec:	11 24       	eor	r1, r1
  ee:	8f 93       	push	r24
  f0:	9f 93       	push	r25
  f2:	ef 93       	push	r30
  f4:	ff 93       	push	r31
    unsigned char tmptail;

    
    if ( UART_TxHead != UART_TxTail) {
  f6:	90 91 9a 01 	lds	r25, 0x019A
  fa:	80 91 9b 01 	lds	r24, 0x019B
  fe:	98 17       	cp	r25, r24
 100:	61 f0       	breq	.+24     	; 0x11a <__vector_12+0x36>
        /* calculate and store new buffer index */
        tmptail = (UART_TxTail + 1) & UART_TX_BUFFER_MASK;
 102:	e0 91 9b 01 	lds	r30, 0x019B
 106:	ef 5f       	subi	r30, 0xFF	; 255
 108:	ef 71       	andi	r30, 0x1F	; 31
        UART_TxTail = tmptail;
 10a:	e0 93 9b 01 	sts	0x019B, r30
        /* get one byte from buffer and write it to UART */
        UART0_DATA = UART_TxBuf[tmptail];  /* start transmission */
 10e:	f0 e0       	ldi	r31, 0x00	; 0
 110:	e6 58       	subi	r30, 0x86	; 134
 112:	ff 4f       	sbci	r31, 0xFF	; 255
 114:	80 81       	ld	r24, Z
 116:	8c b9       	out	0x0c, r24	; 12
 118:	01 c0       	rjmp	.+2      	; 0x11c <__vector_12+0x38>
    }else{
        /* tx buffer empty, disable UDRE interrupt */
        UART0_CONTROL &= ~_BV(UART0_UDRIE);
 11a:	55 98       	cbi	0x0a, 5	; 10
    }
}
 11c:	ff 91       	pop	r31
 11e:	ef 91       	pop	r30
 120:	9f 91       	pop	r25
 122:	8f 91       	pop	r24
 124:	0f 90       	pop	r0
 126:	0f be       	out	0x3f, r0	; 63
 128:	0f 90       	pop	r0
 12a:	1f 90       	pop	r1
 12c:	18 95       	reti

0000012e <clearBuffer>:


//Try to clear the already buffered data
void clearBuffer(){
	
	UART_RxHead = 0;
 12e:	10 92 9c 01 	sts	0x019C, r1
    UART_RxTail = 0;
 132:	10 92 9d 01 	sts	0x019D, r1
}
 136:	08 95       	ret

00000138 <uart_init>:
Purpose:  initialize UART and set baudrate
Input:    baudrate using macro UART_BAUD_SELECT()
Returns:  none
**************************************************************************/
void uart_init(unsigned int baudrate)
{
 138:	9c 01       	movw	r18, r24
    UART_TxHead = 0;
 13a:	10 92 9a 01 	sts	0x019A, r1
    UART_TxTail = 0;
 13e:	10 92 9b 01 	sts	0x019B, r1
    UART_RxHead = 0;
 142:	10 92 9c 01 	sts	0x019C, r1
    UART_RxTail = 0;
 146:	10 92 9d 01 	sts	0x019D, r1
    /* enable UART receiver and transmmitter and receive complete interrupt */
    UART0_CONTROL = _BV(RXCIE)|_BV(RXEN)|_BV(TXEN);

#elif defined (ATMEGA_USART)
    /* Set baud rate */
    if ( baudrate & 0x8000 )
 14a:	97 ff       	sbrs	r25, 7
 14c:	03 c0       	rjmp	.+6      	; 0x154 <uart_init+0x1c>
    {
    	 UART0_STATUS = (1<<U2X);  //Enable 2x speed 
 14e:	82 e0       	ldi	r24, 0x02	; 2
 150:	8b b9       	out	0x0b, r24	; 11
    	 baudrate &= ~0x8000;
 152:	3f 77       	andi	r19, 0x7F	; 127
    }
    UBRRH = (unsigned char)(baudrate>>8);
 154:	30 bd       	out	0x20, r19	; 32
    UBRRL = (unsigned char) baudrate;
 156:	29 b9       	out	0x09, r18	; 9
   
    /* Enable USART receiver and transmitter and receive complete interrupt */
    UART0_CONTROL = _BV(RXCIE)|(1<<RXEN)|(1<<TXEN);
 158:	88 e9       	ldi	r24, 0x98	; 152
 15a:	8a b9       	out	0x0a, r24	; 10
    
    /* Set frame format: asynchronous, 8data, no parity, 1stop bit */
    #ifdef URSEL
    UCSRC = (1<<URSEL)|(3<<UCSZ0);
 15c:	86 e8       	ldi	r24, 0x86	; 134
 15e:	80 bd       	out	0x20, r24	; 32
    /* Enable UART receiver and transmitter and receive complete interrupt */
    UART0_CONTROL = _BV(RXCIE)|(1<<RXEN)|(1<<TXEN);

#endif

}/* uart_init */
 160:	08 95       	ret

00000162 <uart_getc>:
{    
    unsigned char tmptail;
    unsigned char data;


    if ( UART_RxHead == UART_RxTail ) {
 162:	90 91 9c 01 	lds	r25, 0x019C
 166:	80 91 9d 01 	lds	r24, 0x019D
 16a:	98 17       	cp	r25, r24
 16c:	19 f4       	brne	.+6      	; 0x174 <uart_getc+0x12>
 16e:	20 e0       	ldi	r18, 0x00	; 0
 170:	31 e0       	ldi	r19, 0x01	; 1
 172:	11 c0       	rjmp	.+34     	; 0x196 <uart_getc+0x34>
        return UART_NO_DATA;   /* no data available */
    }
    
    /* calculate /store buffer index */
    tmptail = (UART_RxTail + 1) & UART_RX_BUFFER_MASK;
 174:	e0 91 9d 01 	lds	r30, 0x019D
 178:	ef 5f       	subi	r30, 0xFF	; 255
    UART_RxTail = tmptail; 
 17a:	e0 93 9d 01 	sts	0x019D, r30
    
    /* get data from receive buffer */
    data = UART_RxBuf[tmptail];
 17e:	f0 e0       	ldi	r31, 0x00	; 0
 180:	e6 56       	subi	r30, 0x66	; 102
 182:	ff 4f       	sbci	r31, 0xFF	; 255
 184:	30 81       	ld	r19, Z
    
    return (UART_LastRxError << 8) + data;
 186:	20 91 9e 01 	lds	r18, 0x019E
 18a:	92 2f       	mov	r25, r18
 18c:	80 e0       	ldi	r24, 0x00	; 0
 18e:	ac 01       	movw	r20, r24
 190:	43 0f       	add	r20, r19
 192:	51 1d       	adc	r21, r1
 194:	9a 01       	movw	r18, r20

}/* uart_getc */
 196:	c9 01       	movw	r24, r18
 198:	08 95       	ret

0000019a <transmitByte>:


void transmitByte( unsigned char data )
{
	while ( !(UCSRA & (1<<UDRE)) )
 19a:	5d 9b       	sbis	0x0b, 5	; 11
 19c:	fe cf       	rjmp	.-4      	; 0x19a <transmitByte>
		; 			                /* Wait for empty transmit buffer */
	UDR = data; 			        /* Start transmition */
 19e:	8c b9       	out	0x0c, r24	; 12
}
 1a0:	08 95       	ret

000001a2 <uart_putc>:
}/* uart_getc */


void transmitByte( unsigned char data )
{
	while ( !(UCSRA & (1<<UDRE)) )
 1a2:	5d 9b       	sbis	0x0b, 5	; 11
 1a4:	fe cf       	rjmp	.-4      	; 0x1a2 <uart_putc>
		; 			                /* Wait for empty transmit buffer */
	UDR = data; 			        /* Start transmition */
 1a6:	8c b9       	out	0x0c, r24	; 12
    /* enable UDRE interrupt */
    /*UART0_CONTROL    |= _BV(UART0_UDRIE);*/
	
	transmitByte(data);

}/* uart_putc */
 1a8:	08 95       	ret

000001aa <uart_puts>:
Purpose:  transmit string to UART
Input:    string to be transmitted
Returns:  none          
**************************************************************************/
void uart_puts(const char *s )
{
 1aa:	fc 01       	movw	r30, r24
 1ac:	04 c0       	rjmp	.+8      	; 0x1b6 <uart_puts+0xc>
}/* uart_getc */


void transmitByte( unsigned char data )
{
	while ( !(UCSRA & (1<<UDRE)) )
 1ae:	5d 9b       	sbis	0x0b, 5	; 11
 1b0:	fe cf       	rjmp	.-4      	; 0x1ae <uart_puts+0x4>
Returns:  none          
**************************************************************************/
void uart_puts(const char *s )
{
    while (*s) 
      uart_putc(*s++);
 1b2:	31 96       	adiw	r30, 0x01	; 1

void transmitByte( unsigned char data )
{
	while ( !(UCSRA & (1<<UDRE)) )
		; 			                /* Wait for empty transmit buffer */
	UDR = data; 			        /* Start transmition */
 1b4:	8c b9       	out	0x0c, r24	; 12
Input:    string to be transmitted
Returns:  none          
**************************************************************************/
void uart_puts(const char *s )
{
    while (*s) 
 1b6:	80 81       	ld	r24, Z
 1b8:	88 23       	and	r24, r24
 1ba:	c9 f7       	brne	.-14     	; 0x1ae <uart_puts+0x4>
      uart_putc(*s++);

}/* uart_puts */
 1bc:	08 95       	ret

000001be <uart_puts_p>:
Purpose:  transmit string from program memory to UART
Input:    program memory string to be transmitted
Returns:  none
**************************************************************************/
void uart_puts_p(const char *progmem_s )
{
 1be:	03 c0       	rjmp	.+6      	; 0x1c6 <uart_puts_p+0x8>
}/* uart_getc */


void transmitByte( unsigned char data )
{
	while ( !(UCSRA & (1<<UDRE)) )
 1c0:	5d 9b       	sbis	0x0b, 5	; 11
 1c2:	fe cf       	rjmp	.-4      	; 0x1c0 <uart_puts_p+0x2>
		; 			                /* Wait for empty transmit buffer */
	UDR = data; 			        /* Start transmition */
 1c4:	2c b9       	out	0x0c, r18	; 12
 1c6:	fc 01       	movw	r30, r24
**************************************************************************/
void uart_puts_p(const char *progmem_s )
{
    register char c;
    
    while ( (c = pgm_read_byte(progmem_s++)) ) 
 1c8:	01 96       	adiw	r24, 0x01	; 1
 1ca:	24 91       	lpm	r18, Z+
 1cc:	22 23       	and	r18, r18
 1ce:	c1 f7       	brne	.-16     	; 0x1c0 <uart_puts_p+0x2>
      uart_putc(c);

}/* uart_puts_p */
 1d0:	08 95       	ret

000001d2 <readADC>:
int readADC(int channel){
	
	int x;
	long val=0;
	
	ADCSRA |= (1 << ADPS2) | (1 << ADPS1) | (1 << ADPS0) | (1 << ADIF); // Set ADC prescalar to 128 - 125KHz sample rate @ 16MHz
 1d2:	96 b1       	in	r25, 0x06	; 6
 1d4:	97 61       	ori	r25, 0x17	; 23
 1d6:	96 b9       	out	0x06, r25	; 6

	ADMUX = channel;
 1d8:	87 b9       	out	0x07, r24	; 7
	
	ADMUX |= (1 << REFS0); // Set ADC reference to AVCC
 1da:	3e 9a       	sbi	0x07, 6	; 7
	ADMUX |= (1 << ADLAR); // Left adjust ADC result to allow easy 8 bit reading
 1dc:	3d 9a       	sbi	0x07, 5	; 7

	
	//ADCSRA |= (1 << ADFR);  // Set ADC to Free-Running 4
	ADCSRA |= (1 << ADEN);  // Enable ADC
 1de:	37 9a       	sbi	0x06, 7	; 6
	
	ADCSRA |= (1 << ADSC);  // Start A2D Conversions 
 1e0:	36 9a       	sbi	0x06, 6	; 6
	
	
	 //Wait for conversion to complete
   while(!(ADCSRA & (1<<ADIF)));
 1e2:	34 9b       	sbis	0x06, 4	; 6
 1e4:	fe cf       	rjmp	.-4      	; 0x1e2 <readADC+0x10>

   //Clear ADIF by writing one to it
   ADCSRA|=(1<<ADIF);	
 1e6:	34 9a       	sbi	0x06, 4	; 6
	
	return ADCH;
 1e8:	85 b1       	in	r24, 0x05	; 5
}
 1ea:	90 e0       	ldi	r25, 0x00	; 0
 1ec:	08 95       	ret

000001ee <main>:

#define forward PORTD=0xb4;
#define reverse PORTD=0x78;
#define stop    PORTD=0x00;
void main()
{
 1ee:	2f 92       	push	r2
 1f0:	3f 92       	push	r3
 1f2:	4f 92       	push	r4
 1f4:	5f 92       	push	r5
 1f6:	6f 92       	push	r6
 1f8:	7f 92       	push	r7
 1fa:	8f 92       	push	r8
 1fc:	9f 92       	push	r9
 1fe:	af 92       	push	r10
 200:	bf 92       	push	r11
 202:	cf 92       	push	r12
 204:	df 92       	push	r13
 206:	ef 92       	push	r14
 208:	ff 92       	push	r15
 20a:	0f 93       	push	r16
 20c:	1f 93       	push	r17
 20e:	df 93       	push	r29
 210:	cf 93       	push	r28
 212:	cd b7       	in	r28, 0x3d	; 61
 214:	de b7       	in	r29, 0x3e	; 62
 216:	6c 97       	sbiw	r28, 0x1c	; 28
 218:	0f b6       	in	r0, 0x3f	; 63
 21a:	f8 94       	cli
 21c:	de bf       	out	0x3e, r29	; 62
 21e:	0f be       	out	0x3f, r0	; 63
 220:	cd bf       	out	0x3d, r28	; 61
   
DDRC=0x0f;
 222:	8f e0       	ldi	r24, 0x0F	; 15
 224:	84 bb       	out	0x14, r24	; 20
	uart_init(UART_BAUD_SELECT(9600,F_CPU));
 226:	87 e6       	ldi	r24, 0x67	; 103
 228:	90 e0       	ldi	r25, 0x00	; 0
 22a:	0e 94 9c 00 	call	0x138	; 0x138 <uart_init>
	sei();
 22e:	78 94       	sei
	uart_puts("initialized");//uart_putc('f');
 230:	80 e6       	ldi	r24, 0x60	; 96
 232:	90 e0       	ldi	r25, 0x00	; 0
 234:	0e 94 d5 00 	call	0x1aa	; 0x1aa <uart_puts>
	
	
	int a,s,d,f,g,h;
	
	char str[10],str1[10],str2[2],str3[2],str4[2],str5[2];
	sbi(DDRA,0);
 238:	d0 9a       	sbi	0x1a, 0	; 26
	cbi(PORTA,0);
 23a:	d8 98       	cbi	0x1b, 0	; 27
	sbi(DDRD,4);
 23c:	8c 9a       	sbi	0x11, 4	; 17
	sbi(DDRD,5);
 23e:	8d 9a       	sbi	0x11, 5	; 17
	sbi(DDRD,2);
 240:	8a 9a       	sbi	0x11, 2	; 17
	sbi(DDRD,3);
 242:	8b 9a       	sbi	0x11, 3	; 17
	sbi(DDRD,6);
 244:	8e 9a       	sbi	0x11, 6	; 17
	sbi(DDRD,7);
 246:	8f 9a       	sbi	0x11, 7	; 17
	sbi(PORTD,4);
 248:	94 9a       	sbi	0x12, 4	; 18
	sbi(PORTD,5);
 24a:	95 9a       	sbi	0x12, 5	; 18
		uart_puts(str3);

		uart_puts("\n\r");


		itoa(g,str4,10);
 24c:	95 e0       	ldi	r25, 0x05	; 5
 24e:	29 2e       	mov	r2, r25
 250:	31 2c       	mov	r3, r1
 252:	2c 0e       	add	r2, r28
 254:	3d 1e       	adc	r3, r29
		uart_puts(str4);
		uart_puts("\t");
		itoa(h,str5,10);
 256:	87 e0       	ldi	r24, 0x07	; 7
 258:	48 2e       	mov	r4, r24
 25a:	51 2c       	mov	r5, r1
 25c:	4c 0e       	add	r4, r28
 25e:	5d 1e       	adc	r5, r29
	
while(1)
	
	{

		PORTC=0x0f;
 260:	8f e0       	ldi	r24, 0x0F	; 15
 262:	85 bb       	out	0x15, r24	; 21
		a= readADC(1);
 264:	81 e0       	ldi	r24, 0x01	; 1
 266:	90 e0       	ldi	r25, 0x00	; 0
 268:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <readADC>
 26c:	8c 01       	movw	r16, r24
		s= readADC(2);
 26e:	82 e0       	ldi	r24, 0x02	; 2
 270:	90 e0       	ldi	r25, 0x00	; 0
 272:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <readADC>
 276:	4c 01       	movw	r8, r24
		d= readADC(3);
 278:	83 e0       	ldi	r24, 0x03	; 3
 27a:	90 e0       	ldi	r25, 0x00	; 0
 27c:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <readADC>
 280:	3c 01       	movw	r6, r24
		f= readADC(4);
 282:	84 e0       	ldi	r24, 0x04	; 4
 284:	90 e0       	ldi	r25, 0x00	; 0
 286:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <readADC>
 28a:	5c 01       	movw	r10, r24
		g= readADC(5);
 28c:	85 e0       	ldi	r24, 0x05	; 5
 28e:	90 e0       	ldi	r25, 0x00	; 0
 290:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <readADC>
 294:	6c 01       	movw	r12, r24
		h= readADC(6);
 296:	86 e0       	ldi	r24, 0x06	; 6
 298:	90 e0       	ldi	r25, 0x00	; 0
 29a:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <readADC>
 29e:	7c 01       	movw	r14, r24

		itoa(a,str,10);
 2a0:	c8 01       	movw	r24, r16
 2a2:	be 01       	movw	r22, r28
 2a4:	67 5f       	subi	r22, 0xF7	; 247
 2a6:	7f 4f       	sbci	r23, 0xFF	; 255
 2a8:	4a e0       	ldi	r20, 0x0A	; 10
 2aa:	50 e0       	ldi	r21, 0x00	; 0
 2ac:	0e 94 61 02 	call	0x4c2	; 0x4c2 <itoa>
		uart_puts(str);
 2b0:	ce 01       	movw	r24, r28
 2b2:	09 96       	adiw	r24, 0x09	; 9
 2b4:	0e 94 d5 00 	call	0x1aa	; 0x1aa <uart_puts>
		uart_puts("\t");
 2b8:	8c e6       	ldi	r24, 0x6C	; 108
 2ba:	90 e0       	ldi	r25, 0x00	; 0
 2bc:	0e 94 d5 00 	call	0x1aa	; 0x1aa <uart_puts>
		itoa(s,str1,10);
 2c0:	c4 01       	movw	r24, r8
 2c2:	be 01       	movw	r22, r28
 2c4:	6d 5e       	subi	r22, 0xED	; 237
 2c6:	7f 4f       	sbci	r23, 0xFF	; 255
 2c8:	4a e0       	ldi	r20, 0x0A	; 10
 2ca:	50 e0       	ldi	r21, 0x00	; 0
 2cc:	0e 94 61 02 	call	0x4c2	; 0x4c2 <itoa>
		uart_puts(str1);
 2d0:	ce 01       	movw	r24, r28
 2d2:	43 96       	adiw	r24, 0x13	; 19
 2d4:	0e 94 d5 00 	call	0x1aa	; 0x1aa <uart_puts>

		uart_puts("\n\r");
 2d8:	8e e6       	ldi	r24, 0x6E	; 110
 2da:	90 e0       	ldi	r25, 0x00	; 0
 2dc:	0e 94 d5 00 	call	0x1aa	; 0x1aa <uart_puts>


		itoa(d,str2,10);
 2e0:	c3 01       	movw	r24, r6
 2e2:	be 01       	movw	r22, r28
 2e4:	6f 5f       	subi	r22, 0xFF	; 255
 2e6:	7f 4f       	sbci	r23, 0xFF	; 255
 2e8:	4a e0       	ldi	r20, 0x0A	; 10
 2ea:	50 e0       	ldi	r21, 0x00	; 0
 2ec:	0e 94 61 02 	call	0x4c2	; 0x4c2 <itoa>
		uart_puts(str2);
 2f0:	ce 01       	movw	r24, r28
 2f2:	01 96       	adiw	r24, 0x01	; 1
 2f4:	0e 94 d5 00 	call	0x1aa	; 0x1aa <uart_puts>
		uart_puts("\t");
 2f8:	8c e6       	ldi	r24, 0x6C	; 108
 2fa:	90 e0       	ldi	r25, 0x00	; 0
 2fc:	0e 94 d5 00 	call	0x1aa	; 0x1aa <uart_puts>
		itoa(f,str3,10);
 300:	c5 01       	movw	r24, r10
 302:	be 01       	movw	r22, r28
 304:	6d 5f       	subi	r22, 0xFD	; 253
 306:	7f 4f       	sbci	r23, 0xFF	; 255
 308:	4a e0       	ldi	r20, 0x0A	; 10
 30a:	50 e0       	ldi	r21, 0x00	; 0
 30c:	0e 94 61 02 	call	0x4c2	; 0x4c2 <itoa>
		uart_puts(str3);
 310:	ce 01       	movw	r24, r28
 312:	03 96       	adiw	r24, 0x03	; 3
 314:	0e 94 d5 00 	call	0x1aa	; 0x1aa <uart_puts>

		uart_puts("\n\r");
 318:	8e e6       	ldi	r24, 0x6E	; 110
 31a:	90 e0       	ldi	r25, 0x00	; 0
 31c:	0e 94 d5 00 	call	0x1aa	; 0x1aa <uart_puts>


		itoa(g,str4,10);
 320:	c6 01       	movw	r24, r12
 322:	b1 01       	movw	r22, r2
 324:	4a e0       	ldi	r20, 0x0A	; 10
 326:	50 e0       	ldi	r21, 0x00	; 0
 328:	0e 94 61 02 	call	0x4c2	; 0x4c2 <itoa>
		uart_puts(str4);
 32c:	c1 01       	movw	r24, r2
 32e:	0e 94 d5 00 	call	0x1aa	; 0x1aa <uart_puts>
		uart_puts("\t");
 332:	8c e6       	ldi	r24, 0x6C	; 108
 334:	90 e0       	ldi	r25, 0x00	; 0
 336:	0e 94 d5 00 	call	0x1aa	; 0x1aa <uart_puts>
		itoa(h,str5,10);
 33a:	c7 01       	movw	r24, r14
 33c:	b2 01       	movw	r22, r4
 33e:	4a e0       	ldi	r20, 0x0A	; 10
 340:	50 e0       	ldi	r21, 0x00	; 0
 342:	0e 94 61 02 	call	0x4c2	; 0x4c2 <itoa>
		uart_puts(str5);
 346:	c2 01       	movw	r24, r4
 348:	0e 94 d5 00 	call	0x1aa	; 0x1aa <uart_puts>

		uart_puts("\n\r");
 34c:	8e e6       	ldi	r24, 0x6E	; 110
 34e:	90 e0       	ldi	r25, 0x00	; 0
 350:	0e 94 d5 00 	call	0x1aa	; 0x1aa <uart_puts>
		uart_puts("\n\r");
 354:	8e e6       	ldi	r24, 0x6E	; 110
 356:	90 e0       	ldi	r25, 0x00	; 0
 358:	0e 94 d5 00 	call	0x1aa	; 0x1aa <uart_puts>

//_delay_ms(1000);
if((d<=6) && (f<=6) &&(s>=6)&&(g>=6)&&(h>=6)){   //forard
 35c:	87 e0       	ldi	r24, 0x07	; 7
 35e:	68 16       	cp	r6, r24
 360:	71 04       	cpc	r7, r1
 362:	0c f0       	brlt	.+2      	; 0x366 <main+0x178>
 364:	57 c0       	rjmp	.+174    	; 0x414 <main+0x226>
 366:	87 e0       	ldi	r24, 0x07	; 7
 368:	a8 16       	cp	r10, r24
 36a:	b1 04       	cpc	r11, r1
 36c:	0c f0       	brlt	.+2      	; 0x370 <main+0x182>
 36e:	98 c0       	rjmp	.+304    	; 0x4a0 <__stack+0x41>
 370:	86 e0       	ldi	r24, 0x06	; 6
 372:	88 16       	cp	r8, r24
 374:	91 04       	cpc	r9, r1
 376:	0c f4       	brge	.+2      	; 0x37a <main+0x18c>
 378:	93 c0       	rjmp	.+294    	; 0x4a0 <__stack+0x41>
 37a:	86 e0       	ldi	r24, 0x06	; 6
 37c:	c8 16       	cp	r12, r24
 37e:	d1 04       	cpc	r13, r1
 380:	0c f4       	brge	.+2      	; 0x384 <main+0x196>
 382:	99 c0       	rjmp	.+306    	; 0x4b6 <__stack+0x57>
 384:	86 e0       	ldi	r24, 0x06	; 6
 386:	e8 16       	cp	r14, r24
 388:	f1 04       	cpc	r15, r1
 38a:	0c f4       	brge	.+2      	; 0x38e <main+0x1a0>
 38c:	94 c0       	rjmp	.+296    	; 0x4b6 <__stack+0x57>
		sbi(PORTD,2);
 38e:	92 9a       	sbi	0x12, 2	; 18
		cbi(PORTD,3);
 390:	93 98       	cbi	0x12, 3	; 18
		sbi(PORTD,7);
 392:	97 9a       	sbi	0x12, 7	; 18
		cbi(PORTD,6);
 394:	96 98       	cbi	0x12, 6	; 18
				uart_puts("fo");
 396:	81 e7       	ldi	r24, 0x71	; 113
 398:	90 e0       	ldi	r25, 0x00	; 0
 39a:	0e 94 d5 00 	call	0x1aa	; 0x1aa <uart_puts>
 39e:	8b c0       	rjmp	.+278    	; 0x4b6 <__stack+0x57>

	
	}

if((d<=6) && (f<=6) &&(s>=6)&&(g<=6)&&(h<=6)){   //forard
 3a0:	87 e0       	ldi	r24, 0x07	; 7
 3a2:	e8 16       	cp	r14, r24
 3a4:	f1 04       	cpc	r15, r1
 3a6:	0c f0       	brlt	.+2      	; 0x3aa <main+0x1bc>
 3a8:	7b c0       	rjmp	.+246    	; 0x4a0 <__stack+0x41>
		sbi(PORTD,2);
 3aa:	92 9a       	sbi	0x12, 2	; 18
		cbi(PORTD,3);
 3ac:	93 98       	cbi	0x12, 3	; 18
		sbi(PORTD,7);
 3ae:	97 9a       	sbi	0x12, 7	; 18
		cbi(PORTD,6);		uart_puts("fo");
 3b0:	96 98       	cbi	0x12, 6	; 18
 3b2:	81 e7       	ldi	r24, 0x71	; 113
 3b4:	90 e0       	ldi	r25, 0x00	; 0
 3b6:	0e 94 d5 00 	call	0x1aa	; 0x1aa <uart_puts>
 3ba:	72 c0       	rjmp	.+228    	; 0x4a0 <__stack+0x41>

	
	}		

if((d<=6) && (f>=6)&&(s>=6)&&(g>=6)&&(h>=6)){    //right
 3bc:	86 e0       	ldi	r24, 0x06	; 6
 3be:	88 16       	cp	r8, r24
 3c0:	91 04       	cpc	r9, r1
 3c2:	0c f4       	brge	.+2      	; 0x3c6 <main+0x1d8>
 3c4:	72 c0       	rjmp	.+228    	; 0x4aa <__stack+0x4b>
 3c6:	86 e0       	ldi	r24, 0x06	; 6
 3c8:	c8 16       	cp	r12, r24
 3ca:	d1 04       	cpc	r13, r1
 3cc:	0c f4       	brge	.+2      	; 0x3d0 <main+0x1e2>
 3ce:	6d c0       	rjmp	.+218    	; 0x4aa <__stack+0x4b>
 3d0:	86 e0       	ldi	r24, 0x06	; 6
 3d2:	e8 16       	cp	r14, r24
 3d4:	f1 04       	cpc	r15, r1
 3d6:	0c f4       	brge	.+2      	; 0x3da <main+0x1ec>
 3d8:	68 c0       	rjmp	.+208    	; 0x4aa <__stack+0x4b>
		sbi(PORTD,2);
 3da:	92 9a       	sbi	0x12, 2	; 18
		cbi(PORTD,3);
 3dc:	93 98       	cbi	0x12, 3	; 18
		cbi(PORTD,7);
 3de:	97 98       	cbi	0x12, 7	; 18
		sbi(PORTD,6);		uart_puts("ro");
 3e0:	96 9a       	sbi	0x12, 6	; 18
 3e2:	84 e7       	ldi	r24, 0x74	; 116
 3e4:	90 e0       	ldi	r25, 0x00	; 0
 3e6:	0e 94 d5 00 	call	0x1aa	; 0x1aa <uart_puts>
 3ea:	5f c0       	rjmp	.+190    	; 0x4aa <__stack+0x4b>


	}	
	if((d<=6) && (f<=6)&&(s<=6)&&(g>=6)&&(h>=6)){    //right
 3ec:	87 e0       	ldi	r24, 0x07	; 7
 3ee:	88 16       	cp	r8, r24
 3f0:	91 04       	cpc	r9, r1
 3f2:	84 f4       	brge	.+32     	; 0x414 <main+0x226>
 3f4:	86 e0       	ldi	r24, 0x06	; 6
 3f6:	c8 16       	cp	r12, r24
 3f8:	d1 04       	cpc	r13, r1
 3fa:	64 f0       	brlt	.+24     	; 0x414 <main+0x226>
 3fc:	86 e0       	ldi	r24, 0x06	; 6
 3fe:	e8 16       	cp	r14, r24
 400:	f1 04       	cpc	r15, r1
 402:	44 f0       	brlt	.+16     	; 0x414 <main+0x226>
		sbi(PORTD,2);
 404:	92 9a       	sbi	0x12, 2	; 18
		cbi(PORTD,3);
 406:	93 98       	cbi	0x12, 3	; 18
		cbi(PORTD,7);
 408:	97 98       	cbi	0x12, 7	; 18
		sbi(PORTD,6);		uart_puts("ro");
 40a:	96 9a       	sbi	0x12, 6	; 18
 40c:	84 e7       	ldi	r24, 0x74	; 116
 40e:	90 e0       	ldi	r25, 0x00	; 0
 410:	0e 94 d5 00 	call	0x1aa	; 0x1aa <uart_puts>


	}	
if((d>=6) && (f<=6)&&(s>=6)&&(g>=6)&&(h>=6)){     //left
 414:	86 e0       	ldi	r24, 0x06	; 6
 416:	68 16       	cp	r6, r24
 418:	71 04       	cpc	r7, r1
 41a:	c4 f0       	brlt	.+48     	; 0x44c <main+0x25e>
 41c:	87 e0       	ldi	r24, 0x07	; 7
 41e:	a8 16       	cp	r10, r24
 420:	b1 04       	cpc	r11, r1
 422:	a4 f4       	brge	.+40     	; 0x44c <main+0x25e>
 424:	86 e0       	ldi	r24, 0x06	; 6
 426:	88 16       	cp	r8, r24
 428:	91 04       	cpc	r9, r1
 42a:	84 f0       	brlt	.+32     	; 0x44c <main+0x25e>
 42c:	86 e0       	ldi	r24, 0x06	; 6
 42e:	c8 16       	cp	r12, r24
 430:	d1 04       	cpc	r13, r1
 432:	64 f0       	brlt	.+24     	; 0x44c <main+0x25e>
 434:	86 e0       	ldi	r24, 0x06	; 6
 436:	e8 16       	cp	r14, r24
 438:	f1 04       	cpc	r15, r1
 43a:	44 f0       	brlt	.+16     	; 0x44c <main+0x25e>
		
		cbi(PORTD,2);
 43c:	92 98       	cbi	0x12, 2	; 18
		sbi(PORTD,3);
 43e:	93 9a       	sbi	0x12, 3	; 18
		sbi(PORTD,7);
 440:	97 9a       	sbi	0x12, 7	; 18
		cbi(PORTD,6);		uart_puts("lo");
 442:	96 98       	cbi	0x12, 6	; 18
 444:	87 e7       	ldi	r24, 0x77	; 119
 446:	90 e0       	ldi	r25, 0x00	; 0
 448:	0e 94 d5 00 	call	0x1aa	; 0x1aa <uart_puts>



	}	

if((d<=6) && (f<=6)&&(s<=6)&&(g<=6)&&(h<=6)){     //left
 44c:	87 e0       	ldi	r24, 0x07	; 7
 44e:	68 16       	cp	r6, r24
 450:	71 04       	cpc	r7, r1
 452:	0c f0       	brlt	.+2      	; 0x456 <main+0x268>
 454:	05 cf       	rjmp	.-502    	; 0x260 <main+0x72>
 456:	87 e0       	ldi	r24, 0x07	; 7
 458:	a8 16       	cp	r10, r24
 45a:	b1 04       	cpc	r11, r1
 45c:	0c f0       	brlt	.+2      	; 0x460 <__stack+0x1>
 45e:	00 cf       	rjmp	.-512    	; 0x260 <main+0x72>
 460:	87 e0       	ldi	r24, 0x07	; 7
 462:	88 16       	cp	r8, r24
 464:	91 04       	cpc	r9, r1
 466:	0c f0       	brlt	.+2      	; 0x46a <__stack+0xb>
 468:	fb ce       	rjmp	.-522    	; 0x260 <main+0x72>
 46a:	87 e0       	ldi	r24, 0x07	; 7
 46c:	c8 16       	cp	r12, r24
 46e:	d1 04       	cpc	r13, r1
 470:	0c f0       	brlt	.+2      	; 0x474 <__stack+0x15>
 472:	f6 ce       	rjmp	.-532    	; 0x260 <main+0x72>
 474:	87 e0       	ldi	r24, 0x07	; 7
 476:	e8 16       	cp	r14, r24
 478:	f1 04       	cpc	r15, r1
 47a:	0c f0       	brlt	.+2      	; 0x47e <__stack+0x1f>
 47c:	f1 ce       	rjmp	.-542    	; 0x260 <main+0x72>
		
		cbi(PORTD,2);
 47e:	92 98       	cbi	0x12, 2	; 18
		sbi(PORTD,3);
 480:	93 9a       	sbi	0x12, 3	; 18
		sbi(PORTD,7);
 482:	97 9a       	sbi	0x12, 7	; 18
		cbi(PORTD,6);		uart_puts("lo");
 484:	96 98       	cbi	0x12, 6	; 18
 486:	87 e7       	ldi	r24, 0x77	; 119
 488:	90 e0       	ldi	r25, 0x00	; 0
 48a:	0e 94 d5 00 	call	0x1aa	; 0x1aa <uart_puts>
 48e:	88 e8       	ldi	r24, 0x88	; 136
 490:	93 e1       	ldi	r25, 0x13	; 19
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 492:	e0 e9       	ldi	r30, 0x90	; 144
 494:	f1 e0       	ldi	r31, 0x01	; 1
 496:	31 97       	sbiw	r30, 0x01	; 1
 498:	f1 f7       	brne	.-4      	; 0x496 <__stack+0x37>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 49a:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 49c:	d1 f7       	brne	.-12     	; 0x492 <__stack+0x33>
 49e:	e0 ce       	rjmp	.-576    	; 0x260 <main+0x72>
		cbi(PORTD,6);		uart_puts("fo");

	
	}		

if((d<=6) && (f>=6)&&(s>=6)&&(g>=6)&&(h>=6)){    //right
 4a0:	86 e0       	ldi	r24, 0x06	; 6
 4a2:	a8 16       	cp	r10, r24
 4a4:	b1 04       	cpc	r11, r1
 4a6:	0c f0       	brlt	.+2      	; 0x4aa <__stack+0x4b>
 4a8:	89 cf       	rjmp	.-238    	; 0x3bc <main+0x1ce>
		cbi(PORTD,7);
		sbi(PORTD,6);		uart_puts("ro");


	}	
	if((d<=6) && (f<=6)&&(s<=6)&&(g>=6)&&(h>=6)){    //right
 4aa:	87 e0       	ldi	r24, 0x07	; 7
 4ac:	a8 16       	cp	r10, r24
 4ae:	b1 04       	cpc	r11, r1
 4b0:	0c f4       	brge	.+2      	; 0x4b4 <__stack+0x55>
 4b2:	9c cf       	rjmp	.-200    	; 0x3ec <main+0x1fe>
 4b4:	af cf       	rjmp	.-162    	; 0x414 <main+0x226>
				uart_puts("fo");

	
	}

if((d<=6) && (f<=6) &&(s>=6)&&(g<=6)&&(h<=6)){   //forard
 4b6:	87 e0       	ldi	r24, 0x07	; 7
 4b8:	c8 16       	cp	r12, r24
 4ba:	d1 04       	cpc	r13, r1
 4bc:	0c f4       	brge	.+2      	; 0x4c0 <__stack+0x61>
 4be:	70 cf       	rjmp	.-288    	; 0x3a0 <main+0x1b2>
 4c0:	ef cf       	rjmp	.-34     	; 0x4a0 <__stack+0x41>

000004c2 <itoa>:
 4c2:	fb 01       	movw	r30, r22
 4c4:	9f 01       	movw	r18, r30
 4c6:	e8 94       	clt
 4c8:	42 30       	cpi	r20, 0x02	; 2
 4ca:	c4 f0       	brlt	.+48     	; 0x4fc <itoa+0x3a>
 4cc:	45 32       	cpi	r20, 0x25	; 37
 4ce:	b4 f4       	brge	.+44     	; 0x4fc <itoa+0x3a>
 4d0:	4a 30       	cpi	r20, 0x0A	; 10
 4d2:	29 f4       	brne	.+10     	; 0x4de <itoa+0x1c>
 4d4:	97 fb       	bst	r25, 7
 4d6:	1e f4       	brtc	.+6      	; 0x4de <itoa+0x1c>
 4d8:	90 95       	com	r25
 4da:	81 95       	neg	r24
 4dc:	9f 4f       	sbci	r25, 0xFF	; 255
 4de:	64 2f       	mov	r22, r20
 4e0:	77 27       	eor	r23, r23
 4e2:	0e 94 92 02 	call	0x524	; 0x524 <__udivmodhi4>
 4e6:	80 5d       	subi	r24, 0xD0	; 208
 4e8:	8a 33       	cpi	r24, 0x3A	; 58
 4ea:	0c f0       	brlt	.+2      	; 0x4ee <itoa+0x2c>
 4ec:	89 5d       	subi	r24, 0xD9	; 217
 4ee:	81 93       	st	Z+, r24
 4f0:	cb 01       	movw	r24, r22
 4f2:	00 97       	sbiw	r24, 0x00	; 0
 4f4:	a1 f7       	brne	.-24     	; 0x4de <itoa+0x1c>
 4f6:	16 f4       	brtc	.+4      	; 0x4fc <itoa+0x3a>
 4f8:	5d e2       	ldi	r21, 0x2D	; 45
 4fa:	51 93       	st	Z+, r21
 4fc:	10 82       	st	Z, r1
 4fe:	c9 01       	movw	r24, r18
 500:	0c 94 82 02 	jmp	0x504	; 0x504 <strrev>

00000504 <strrev>:
 504:	dc 01       	movw	r26, r24
 506:	fc 01       	movw	r30, r24
 508:	67 2f       	mov	r22, r23
 50a:	71 91       	ld	r23, Z+
 50c:	77 23       	and	r23, r23
 50e:	e1 f7       	brne	.-8      	; 0x508 <strrev+0x4>
 510:	32 97       	sbiw	r30, 0x02	; 2
 512:	04 c0       	rjmp	.+8      	; 0x51c <strrev+0x18>
 514:	7c 91       	ld	r23, X
 516:	6d 93       	st	X+, r22
 518:	70 83       	st	Z, r23
 51a:	62 91       	ld	r22, -Z
 51c:	ae 17       	cp	r26, r30
 51e:	bf 07       	cpc	r27, r31
 520:	c8 f3       	brcs	.-14     	; 0x514 <strrev+0x10>
 522:	08 95       	ret

00000524 <__udivmodhi4>:
 524:	aa 1b       	sub	r26, r26
 526:	bb 1b       	sub	r27, r27
 528:	51 e1       	ldi	r21, 0x11	; 17
 52a:	07 c0       	rjmp	.+14     	; 0x53a <__udivmodhi4_ep>

0000052c <__udivmodhi4_loop>:
 52c:	aa 1f       	adc	r26, r26
 52e:	bb 1f       	adc	r27, r27
 530:	a6 17       	cp	r26, r22
 532:	b7 07       	cpc	r27, r23
 534:	10 f0       	brcs	.+4      	; 0x53a <__udivmodhi4_ep>
 536:	a6 1b       	sub	r26, r22
 538:	b7 0b       	sbc	r27, r23

0000053a <__udivmodhi4_ep>:
 53a:	88 1f       	adc	r24, r24
 53c:	99 1f       	adc	r25, r25
 53e:	5a 95       	dec	r21
 540:	a9 f7       	brne	.-22     	; 0x52c <__udivmodhi4_loop>
 542:	80 95       	com	r24
 544:	90 95       	com	r25
 546:	bc 01       	movw	r22, r24
 548:	cd 01       	movw	r24, r26
 54a:	08 95       	ret

0000054c <_exit>:
 54c:	f8 94       	cli

0000054e <__stop_program>:
 54e:	ff cf       	rjmp	.-2      	; 0x54e <__stop_program>
